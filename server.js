const express = require('express');
const cors = require('cors');
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.use(cors());
app.use(express.json());

// Health check
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString()
    });
});

// Gemini API endpoint
app.post('/api/chat', async (req, res) => {
    try {
        const { message, systemInstruction } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }

        const model = genAI.getGenerativeModel({ 
            model: "gemini-pro",
            systemInstruction: systemInstruction || "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        });
        
        const result = await model.generateContent(message);
        const response = await result.response;
        
        res.json({
            text: response.text(),
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Gemini error:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
    res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
});

// –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π HTML
app.get('/', (req, res) => {
    res.send(`
        <html>
            <head><title>–ú–æ–π —Å–µ—Ä–≤–µ—Ä</title></head>
            <body>
                <h1>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ</h1>
                <p>–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
            </body>
        </html>
    `);
});
app.listen(3000, '0.0.0.0', () => {
    console.log('‚úì –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    console.log('‚úì –õ–æ–∫–∞–ª—å–Ω—ã–π: http://localhost:3000');
    console.log('‚úì –°–µ—Ç—å: http://192.168.0.103:3000');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP
function getIPAddress() {
    const interfaces = require('os').networkInterfaces();
    for (const name in interfaces) {
        for (const interface of interfaces[name]) {
            if (interface.family === 'IPv4' && !interface.internal) {
                return interface.address;
            }
        }
    }
    return 'localhost';
}